/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg1;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Font;
import static java.awt.Font.BOLD;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.spi.ObjectFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileView;
import javax.swing.plaf.basic.BasicComboBoxRenderer;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import model.Contact;
import model.Message;
import model.Room;
import model.User;
import view.ClientInputHandler;
import view.IClientInputHandler;

/**
 *
 * @author Radwa Manssour
 */
public class conversation extends javax.swing.JFrame {

    /**
     * Creates new form conversation
     */
    //sarah
    public StyledDocument doc;
    public StyledDocument doc2;
    // Define a keyword attribute...sarah
    public SimpleAttributeSet keyWord;
    Color colorChooser;
    Font font;

    //sarah
    private String roomId;
    private Room room;
    private User user;
    chatCui gui;
    public FriendList friendList;

    public void setRoom(Room room) {
        this.room = room;
        name.setText(room.contactVector.get(1).getName());
    }

    public Room getRoom() {
        return room;
    }

    public void setRoomId(String roomId) {
        this.roomId = roomId;
    }

    public String getRoomId() {
        return roomId;
    }

    public conversation(chatCui gui, Room room) {
        try {
            //super(parent, modal);
            initComponents();
            this.user = gui.user;
            this.room = room;
            setSize(700, 700);
            this.gui = gui;
            friendList = new FriendList(gui, user, this);
            keyWord = new SimpleAttributeSet();
            colorChooser = Color.BLACK;
            font = new Font("Tahoma", Font.PLAIN, 14);
            StyleConstants.setForeground(keyWord, colorChooser);
            StyleConstants.setFontFamily(keyWord, font.getFamily());
            doc2=mainJpane.getStyledDocument();
            doc=chatJpane.getStyledDocument();
            chatJpane.setText(" ");
            mainJpane.setText(" ");
            
            
            GraphicsEnvironment obj = GraphicsEnvironment.getLocalGraphicsEnvironment();
            String[] fontFamilies = obj.getAvailableFontFamilyNames();
            for (String fontFamilie : fontFamilies) {
                fontChooserComboBox.addItem(fontFamilie);
            }
            fontChooserComboBox.setRenderer(new ComboRenderer(fontChooserComboBox));
            fontChooserComboBox.addItemListener(new ItemListener() {
                
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (e.getStateChange() == ItemEvent.SELECTED) {
                        final String fontName = fontChooserComboBox.getSelectedItem().toString();
                        fontChooserComboBox.setFont(new Font(fontName, Font.PLAIN, 16));
                    }
                }
            });
            fontChooserComboBox.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            color.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            doc2.insertString(0, " ", null);
            doc.insertString(0, " ", null);
        } catch (BadLocationException ex) {
            Logger.getLogger(conversation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        img1 = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        mainJpane = new javax.swing.JTextPane();
        send1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        saveMessage = new javax.swing.JButton();
        attach1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        fontChooserComboBox = new javax.swing.JComboBox();
        color = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        chatJpane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(25, 173, 250));
        setResizable(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        jPanel2.setBackground(new java.awt.Color(25, 173, 250));
        jPanel2.setMaximumSize(new java.awt.Dimension(320, 280));
        jPanel2.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel2.setPreferredSize(new java.awt.Dimension(320, 280));
        jPanel2.setLayout(null);

        img1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg1/Person_1.png"))); // NOI18N
        img1.setText("jLabel1");
        jPanel2.add(img1);
        img1.setBounds(10, 10, 80, 80);

        name.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        name.setForeground(new java.awt.Color(255, 255, 255));
        name.setText("name");
        jPanel2.add(name);
        name.setBounds(104, 17, 165, 24);

        mainJpane.setEditable(false);
        jScrollPane3.setViewportView(mainJpane);

        jPanel2.add(jScrollPane3);
        jScrollPane3.setBounds(10, 110, 510, 170);

        send1.setBackground(new java.awt.Color(25, 173, 250));
        send1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        send1.setForeground(new java.awt.Color(255, 255, 255));
        send1.setText("send");
        send1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send1ActionPerformed(evt);
            }
        });
        jPanel2.add(send1);
        send1.setBounds(460, 360, 60, 35);

        jPanel3.setMaximumSize(new java.awt.Dimension(20, 20));
        jPanel3.setMinimumSize(new java.awt.Dimension(20, 20));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));
        jPanel2.add(jPanel3);
        jPanel3.setBounds(520, 296, 166, 0);

        saveMessage.setBackground(new java.awt.Color(63, 129, 179));
        saveMessage.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        saveMessage.setForeground(new java.awt.Color(255, 255, 255));
        saveMessage.setText("save");
        saveMessage.setMaximumSize(new java.awt.Dimension(100, 35));
        saveMessage.setMinimumSize(new java.awt.Dimension(0, 0));
        saveMessage.setPreferredSize(new java.awt.Dimension(100, 35));
        saveMessage.setRolloverEnabled(false);
        saveMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMessageActionPerformed(evt);
            }
        });
        jPanel2.add(saveMessage);
        saveMessage.setBounds(430, 300, 70, 30);

        attach1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg1/file_1.png"))); // NOI18N
        attach1.setMaximumSize(new java.awt.Dimension(35, 35));
        attach1.setMinimumSize(new java.awt.Dimension(0, 35));
        attach1.setPreferredSize(new java.awt.Dimension(35, 35));
        attach1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attach1ActionPerformed(evt);
            }
        });
        jPanel2.add(attach1);
        attach1.setBounds(11, 299, 50, 30);

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(191, 225, 252));
        jTextField1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(0, 170, 240));
        jTextField1.setText("write status");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel2.add(jTextField1);
        jTextField1.setBounds(157, 53, 201, 23);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("status");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(104, 54, 46, 20);

        jButton1.setBackground(new java.awt.Color(63, 129, 179));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("add member");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);
        jButton1.setBounds(420, 50, 100, 27);

        jButton3.setBackground(new java.awt.Color(63, 129, 179));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("leave conversation");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);
        jButton3.setBounds(280, 300, 146, 30);

        fontChooserComboBox.setBackground(new java.awt.Color(63, 129, 179));
        fontChooserComboBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        fontChooserComboBox.setForeground(new java.awt.Color(255, 255, 255));
        fontChooserComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "fonts" }));
        fontChooserComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontChooserComboBoxActionPerformed(evt);
            }
        });
        jPanel2.add(fontChooserComboBox);
        fontChooserComboBox.setBounds(170, 300, 110, 30);

        color.setBackground(new java.awt.Color(63, 129, 179));
        color.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        color.setForeground(new java.awt.Color(255, 255, 255));
        color.setText("colors");
        color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorActionPerformed(evt);
            }
        });
        jPanel2.add(color);
        color.setBounds(60, 300, 110, 30);

        jScrollPane1.setViewportView(chatJpane);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 340, 440, 80);

        getContentPane().add(jPanel2, "card2");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void send1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send1ActionPerformed
        String s = chatJpane.getText();

        Message m = new Message(roomId, null, user.getUserName(), s, true);
        m.setKeyWord(keyWord);
        gui.cih.sendMessage(room, m);
    }//GEN-LAST:event_send1ActionPerformed

    private void saveMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMessageActionPerformed
        /* try {
         // TODO add your handling code here:
         xmlproject.ObjectFactory factory = new ObjectFactory();
         ChatType ch = factory.createChatType();

         ch.setHeader("sent messages");
         GregorianCalendar c = new GregorianCalendar();
         Date d = new Date();
         c.setTime(d);
         XMLGregorianCalendar date2 = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
         ch.setDate(date2);
         //
         //            for (int i = 0; i < room.messageVector.size(); i++) {
         //                Message m = room.messageVector.get(i);
         //                MsgType msg2 = factory.createMsgType();
         //                msg2.setName(m.getSender());
         //                msg2.setBody(m.getTxt());
         //                ch.getMsg().add(msg2);
         //
         //            }
         System.out.println("before xml ...");
         Message m = new Message(roomId, null, "sarah@aabed", "hello i am sarah aabed 000", true);
         MsgType msg2 = factory.createMsgType();
         msg2.setName("sarah");
         msg2.setBody("btfdes");
         ch.getMsg().add(msg2);

         JAXBContext context = JAXBContext.newInstance("xmlproject");
         JAXBElement<ChatType> element = factory.createMyMsg(ch);
         Marshaller marsh = context.createMarshaller();
         marsh.setProperty("jaxb.formatted.output", Boolean.TRUE);
         marsh.marshal(element, new File("E:\\SARAH\\ITI_Resources\\Java\\Project\\lastVersionProject\\demo1.xml"));
         } catch (DatatypeConfigurationException | JAXBException ex) {
         Logger.getLogger(conversation.class.getName()).log(Level.SEVERE, null, ex);
         }*/
    }//GEN-LAST:event_saveMessageActionPerformed

    private void attach1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attach1ActionPerformed
        ImageIcon i = new ImageIcon("/pkg1/file.png");

        JFileChooser f = new JFileChooser();
        MyFileView fileView = new MyFileView();
        f.setFileView(fileView);

        if (f.showOpenDialog(conversation.this) == JFileChooser.APPROVE_OPTION) {
            String path = f.getSelectedFile().getPath();
            String name = f.getSelectedFile().getName();
            try {
                FileInputStream fis = new FileInputStream(path);
                int size = fis.available();
                byte[] b = new byte[size];
                fis.read(b);
                // Message m=new Message(roomId, null, null, null, true);
                IClientInputHandler cih = new ClientInputHandler();
                cih.sendFile(room, b, name, user);
                // jTextArea1.setText(new String(b));
                fis.close();

            } catch (FileNotFoundException e) {
                System.out.println("FileNotFound");
            } catch (IOException ex) {
                Logger.getLogger(conversation.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_attach1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        friendList.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        room.contactVector.remove(user);
        setEnabled(false);
        gui.rooms.remove(room.getRoomId());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void fontChooserComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontChooserComboBoxActionPerformed

        try {
            // TODO add your handling code here:
            String selectedItem = (String) fontChooserComboBox.getSelectedItem();
            font = new Font(selectedItem, Font.BOLD, 14);
            //StyleConstants.setForeground(keyWord, colorChooser);
            StyleConstants.setFontFamily(keyWord, font.getFamily());

            doc.insertString(doc.getLength(), " ", keyWord);

            //doc2.insertString(doc2.getLength(), " ", keyWord);

            // text1.setFont(font);
        } catch (BadLocationException ex) {
            Logger.getLogger(conversation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fontChooserComboBoxActionPerformed

    private void colorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorActionPerformed
        try {
            // TODO add your handling code here:
            Color initialBackground = this.getBackground();
            colorChooser = JColorChooser.showDialog(null, "JColorChooser Sample", initialBackground);
            // text1.setForeground(colorChooser);
            if (colorChooser != null) {
                color.setBackground(colorChooser);
            }

            //SimpleAttributeSet keyWord = new SimpleAttributeSet();
            StyleConstants.setForeground(keyWord, colorChooser);
            
            doc.insertString(doc.getLength(), " ", keyWord);

//            doc2.insertString(doc2.getLength(), " ", keyWord);
        } catch (BadLocationException ex) {
            Logger.getLogger(conversation.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_colorActionPerformed
//sarah 

    private class ComboRenderer extends BasicComboBoxRenderer {

        private static final long serialVersionUID = 1L;
        private JComboBox comboBox;
        final DefaultListCellRenderer defaultRenderer = new DefaultListCellRenderer();
        private int row;

        private ComboRenderer(JComboBox fontsBox) {
            comboBox = fontsBox;
        }

        private void manItemInCombo() {
            if (comboBox.getItemCount() > 0) {
                final Object comp = comboBox.getUI().getAccessibleChild(comboBox, 0);
                if ((comp instanceof JPopupMenu)) {
                    final JList list = new JList(comboBox.getModel());
                    final JPopupMenu popup = (JPopupMenu) comp;
                    final JScrollPane scrollPane = (JScrollPane) popup.getComponent(0);
                    final JViewport viewport = scrollPane.getViewport();
                    final Rectangle rect = popup.getVisibleRect();
                    final Point pt = viewport.getViewPosition();
                    row = list.locationToIndex(pt);
                }
            }
        }

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            if (list.getModel().getSize() > 0) {
                manItemInCombo();
            }
            final JLabel renderer = (JLabel) defaultRenderer.getListCellRendererComponent(list, value, row, isSelected, cellHasFocus);
            final Object fntObj = value;
            final String fontFamilyName = (String) fntObj;
            setFont(new Font(fontFamilyName, Font.PLAIN, 16));
            return this;
        }
    }
    //sarah

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attach1;
    private javax.swing.JTextPane chatJpane;
    private javax.swing.JButton color;
    private javax.swing.JComboBox fontChooserComboBox;
    public javax.swing.JLabel img1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    public javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane mainJpane;
    public javax.swing.JLabel name;
    private javax.swing.JButton saveMessage;
    private javax.swing.JButton send1;
    // End of variables declaration//GEN-END:variables
}

class MyJpgFilter extends FileFilter{
    public boolean accept(File f){
        if((f.getName().toLowerCase().endsWith(".jpg"))||(f.isDirectory()) || (f.getName().toLowerCase().endsWith(".png"))){
            return true;
        } else {
            return false;
        }
    }

    public String getDescription() {
        return "JPG Files (.jpg)";
    }
}

class MyFileView extends FileView {

    public Icon getIcon(File f) {
        if (f.isDirectory()) {
            Image img = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/login/dir.jpg")).getScaledInstance(32, 32, Image.SCALE_SMOOTH);
            ImageIcon icon = new ImageIcon(img);
            return icon;
        }
        if (f.isFile()) {
            Image img = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/login/file.jpg")).getScaledInstance(32, 32, Image.SCALE_SMOOTH);
            ImageIcon icon = new ImageIcon(img);
            return icon;
        }
        if ((f.getName().toLowerCase().endsWith(".jpg"))) {
            Image img = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/login/image.jpg")).getScaledInstance(32, 32, Image.SCALE_SMOOTH);
            ImageIcon icon = new ImageIcon(img);
            return icon;
        } else {
            return null;
        }
    }

}
